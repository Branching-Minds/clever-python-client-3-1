# coding: utf-8

"""
    Data API

    Serves the Clever Data API  # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Disability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disability_code': 'str',
        'disability_status': 'str',
        'disability_type': 'str'
    }

    attribute_map = {
        'disability_code': 'disability_code',
        'disability_status': 'disability_status',
        'disability_type': 'disability_type'
    }

    def __init__(self, disability_code=None, disability_status=None, disability_type=None):  # noqa: E501
        """Disability - a model defined in Swagger"""  # noqa: E501
        self._disability_code = None
        self._disability_status = None
        self._disability_type = None
        self.discriminator = None
        if disability_code is not None:
            self.disability_code = disability_code
        if disability_status is not None:
            self.disability_status = disability_status
        if disability_type is not None:
            self.disability_type = disability_type

    @property
    def disability_code(self):
        """Gets the disability_code of this Disability.  # noqa: E501


        :return: The disability_code of this Disability.  # noqa: E501
        :rtype: str
        """
        return self._disability_code

    @disability_code.setter
    def disability_code(self, disability_code):
        """Sets the disability_code of this Disability.


        :param disability_code: The disability_code of this Disability.  # noqa: E501
        :type: str
        """
        allowed_values = ["aut", "db", "dd", "emn", "hi", "id", "md", "oi", "other", "ohi", "sld", "sli", "tbi", "vi"]  # noqa: E501
        if disability_code not in allowed_values:
            raise ValueError(
                "Invalid value for `disability_code` ({0}), must be one of {1}"  # noqa: E501
                .format(disability_code, allowed_values)
            )

        self._disability_code = disability_code

    @property
    def disability_status(self):
        """Gets the disability_status of this Disability.  # noqa: E501


        :return: The disability_status of this Disability.  # noqa: E501
        :rtype: str
        """
        return self._disability_status

    @disability_status.setter
    def disability_status(self, disability_status):
        """Sets the disability_status of this Disability.


        :param disability_status: The disability_status of this Disability.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N", ""]  # noqa: E501
        if disability_status not in allowed_values:
            raise ValueError(
                "Invalid value for `disability_status` ({0}), must be one of {1}"  # noqa: E501
                .format(disability_status, allowed_values)
            )

        self._disability_status = disability_status

    @property
    def disability_type(self):
        """Gets the disability_type of this Disability.  # noqa: E501


        :return: The disability_type of this Disability.  # noqa: E501
        :rtype: str
        """
        return self._disability_type

    @disability_type.setter
    def disability_type(self, disability_type):
        """Sets the disability_type of this Disability.


        :param disability_type: The disability_type of this Disability.  # noqa: E501
        :type: str
        """
        allowed_values = ["Autism", "Deaf-blindness", "Developmental delay", "Emotional disturbance", "Hearing impairment", "Intellectual Disability", "Multiple disabilities", "Orthopedic impairment", "Other", "Other health impairment", "Specific learning disability", "Speech or language impairment", "Traumatic brain injury", "Visual impairment"]  # noqa: E501
        if disability_type not in allowed_values:
            raise ValueError(
                "Invalid value for `disability_type` ({0}), must be one of {1}"  # noqa: E501
                .format(disability_type, allowed_values)
            )

        self._disability_type = disability_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Disability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Disability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

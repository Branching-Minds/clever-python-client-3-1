# coding: utf-8

"""
    Data API

    Serves the Clever Data API  # noqa: E501

    OpenAPI spec version: 3.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Student(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'str',
        'credentials': 'Credentials',
        'disability': 'Disability',
        'dob': 'str',
        'ell_status': 'str',
        'enrollments': 'list[SchoolEnrollment]',
        'ext': 'object',
        'frl_status': 'str',
        'gender': 'str',
        'gifted_status': 'str',
        'grade': 'str',
        'graduation_year': 'str',
        'hispanic_ethnicity': 'str',
        'home_language': 'str',
        'home_language_code': 'str',
        'iep_status': 'str',
        'last_modified': 'str',
        'legacy_id': 'str',
        'location': 'Location',
        'preferred_name': 'PreferredName',
        'race': 'str',
        'school': 'str',
        'schools': 'list[str]',
        'section_504_status': 'str',
        'sis_id': 'str',
        'state_id': 'str',
        'student_number': 'str'
    }

    attribute_map = {
        'created': 'created',
        'credentials': 'credentials',
        'disability': 'disability',
        'dob': 'dob',
        'ell_status': 'ell_status',
        'enrollments': 'enrollments',
        'ext': 'ext',
        'frl_status': 'frl_status',
        'gender': 'gender',
        'gifted_status': 'gifted_status',
        'grade': 'grade',
        'graduation_year': 'graduation_year',
        'hispanic_ethnicity': 'hispanic_ethnicity',
        'home_language': 'home_language',
        'home_language_code': 'home_language_code',
        'iep_status': 'iep_status',
        'last_modified': 'last_modified',
        'legacy_id': 'legacy_id',
        'location': 'location',
        'preferred_name': 'preferred_name',
        'race': 'race',
        'school': 'school',
        'schools': 'schools',
        'section_504_status': 'section_504_status',
        'sis_id': 'sis_id',
        'state_id': 'state_id',
        'student_number': 'student_number'
    }

    def __init__(self, created=None, credentials=None, disability=None, dob=None, ell_status=None, enrollments=None, ext=None, frl_status=None, gender=None, gifted_status=None, grade=None, graduation_year=None, hispanic_ethnicity=None, home_language=None, home_language_code=None, iep_status=None, last_modified=None, legacy_id=None, location=None, preferred_name=None, race=None, school=None, schools=None, section_504_status=None, sis_id=None, state_id=None, student_number=None):  # noqa: E501
        """Student - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._credentials = None
        self._disability = None
        self._dob = None
        self._ell_status = None
        self._enrollments = None
        self._ext = None
        self._frl_status = None
        self._gender = None
        self._gifted_status = None
        self._grade = None
        self._graduation_year = None
        self._hispanic_ethnicity = None
        self._home_language = None
        self._home_language_code = None
        self._iep_status = None
        self._last_modified = None
        self._legacy_id = None
        self._location = None
        self._preferred_name = None
        self._race = None
        self._school = None
        self._schools = None
        self._section_504_status = None
        self._sis_id = None
        self._state_id = None
        self._student_number = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if credentials is not None:
            self.credentials = credentials
        if disability is not None:
            self.disability = disability
        if dob is not None:
            self.dob = dob
        if ell_status is not None:
            self.ell_status = ell_status
        if enrollments is not None:
            self.enrollments = enrollments
        if ext is not None:
            self.ext = ext
        if frl_status is not None:
            self.frl_status = frl_status
        if gender is not None:
            self.gender = gender
        if gifted_status is not None:
            self.gifted_status = gifted_status
        if grade is not None:
            self.grade = grade
        if graduation_year is not None:
            self.graduation_year = graduation_year
        if hispanic_ethnicity is not None:
            self.hispanic_ethnicity = hispanic_ethnicity
        if home_language is not None:
            self.home_language = home_language
        if home_language_code is not None:
            self.home_language_code = home_language_code
        if iep_status is not None:
            self.iep_status = iep_status
        if last_modified is not None:
            self.last_modified = last_modified
        if legacy_id is not None:
            self.legacy_id = legacy_id
        if location is not None:
            self.location = location
        if preferred_name is not None:
            self.preferred_name = preferred_name
        if race is not None:
            self.race = race
        if school is not None:
            self.school = school
        if schools is not None:
            self.schools = schools
        if section_504_status is not None:
            self.section_504_status = section_504_status
        if sis_id is not None:
            self.sis_id = sis_id
        if state_id is not None:
            self.state_id = state_id
        if student_number is not None:
            self.student_number = student_number

    @property
    def created(self):
        """Gets the created of this Student.  # noqa: E501


        :return: The created of this Student.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Student.


        :param created: The created of this Student.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def credentials(self):
        """Gets the credentials of this Student.  # noqa: E501


        :return: The credentials of this Student.  # noqa: E501
        :rtype: Credentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Student.


        :param credentials: The credentials of this Student.  # noqa: E501
        :type: Credentials
        """

        self._credentials = credentials

    @property
    def disability(self):
        """Gets the disability of this Student.  # noqa: E501


        :return: The disability of this Student.  # noqa: E501
        :rtype: Disability
        """
        return self._disability

    @disability.setter
    def disability(self, disability):
        """Sets the disability of this Student.


        :param disability: The disability of this Student.  # noqa: E501
        :type: Disability
        """

        self._disability = disability

    @property
    def dob(self):
        """Gets the dob of this Student.  # noqa: E501


        :return: The dob of this Student.  # noqa: E501
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this Student.


        :param dob: The dob of this Student.  # noqa: E501
        :type: str
        """

        self._dob = dob

    @property
    def ell_status(self):
        """Gets the ell_status of this Student.  # noqa: E501


        :return: The ell_status of this Student.  # noqa: E501
        :rtype: str
        """
        return self._ell_status

    @ell_status.setter
    def ell_status(self, ell_status):
        """Sets the ell_status of this Student.


        :param ell_status: The ell_status of this Student.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N", ""]  # noqa: E501
        if ell_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ell_status` ({0}), must be one of {1}"  # noqa: E501
                .format(ell_status, allowed_values)
            )

        self._ell_status = ell_status

    @property
    def enrollments(self):
        """Gets the enrollments of this Student.  # noqa: E501


        :return: The enrollments of this Student.  # noqa: E501
        :rtype: list[SchoolEnrollment]
        """
        return self._enrollments

    @enrollments.setter
    def enrollments(self, enrollments):
        """Sets the enrollments of this Student.


        :param enrollments: The enrollments of this Student.  # noqa: E501
        :type: list[SchoolEnrollment]
        """

        self._enrollments = enrollments

    @property
    def ext(self):
        """Gets the ext of this Student.  # noqa: E501


        :return: The ext of this Student.  # noqa: E501
        :rtype: object
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this Student.


        :param ext: The ext of this Student.  # noqa: E501
        :type: object
        """

        self._ext = ext

    @property
    def frl_status(self):
        """Gets the frl_status of this Student.  # noqa: E501


        :return: The frl_status of this Student.  # noqa: E501
        :rtype: str
        """
        return self._frl_status

    @frl_status.setter
    def frl_status(self, frl_status):
        """Sets the frl_status of this Student.


        :param frl_status: The frl_status of this Student.  # noqa: E501
        :type: str
        """
        allowed_values = ["Free", "Reduced", "Paid", "Other", ""]  # noqa: E501
        if frl_status not in allowed_values:
            raise ValueError(
                "Invalid value for `frl_status` ({0}), must be one of {1}"  # noqa: E501
                .format(frl_status, allowed_values)
            )

        self._frl_status = frl_status

    @property
    def gender(self):
        """Gets the gender of this Student.  # noqa: E501


        :return: The gender of this Student.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Student.


        :param gender: The gender of this Student.  # noqa: E501
        :type: str
        """
        allowed_values = ["M", "F", "X", ""]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def gifted_status(self):
        """Gets the gifted_status of this Student.  # noqa: E501


        :return: The gifted_status of this Student.  # noqa: E501
        :rtype: str
        """
        return self._gifted_status

    @gifted_status.setter
    def gifted_status(self, gifted_status):
        """Sets the gifted_status of this Student.


        :param gifted_status: The gifted_status of this Student.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N", ""]  # noqa: E501
        if gifted_status not in allowed_values:
            raise ValueError(
                "Invalid value for `gifted_status` ({0}), must be one of {1}"  # noqa: E501
                .format(gifted_status, allowed_values)
            )

        self._gifted_status = gifted_status

    @property
    def grade(self):
        """Gets the grade of this Student.  # noqa: E501


        :return: The grade of this Student.  # noqa: E501
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this Student.


        :param grade: The grade of this Student.  # noqa: E501
        :type: str
        """
        allowed_values = ["InfantToddler", "Preschool", "PreKindergarten", "TransitionalKindergarten", "Kindergarten", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "PostGraduate", "Ungraded", "Other", ""]  # noqa: E501
        if grade not in allowed_values:
            raise ValueError(
                "Invalid value for `grade` ({0}), must be one of {1}"  # noqa: E501
                .format(grade, allowed_values)
            )

        self._grade = grade

    @property
    def graduation_year(self):
        """Gets the graduation_year of this Student.  # noqa: E501


        :return: The graduation_year of this Student.  # noqa: E501
        :rtype: str
        """
        return self._graduation_year

    @graduation_year.setter
    def graduation_year(self, graduation_year):
        """Sets the graduation_year of this Student.


        :param graduation_year: The graduation_year of this Student.  # noqa: E501
        :type: str
        """

        self._graduation_year = graduation_year

    @property
    def hispanic_ethnicity(self):
        """Gets the hispanic_ethnicity of this Student.  # noqa: E501


        :return: The hispanic_ethnicity of this Student.  # noqa: E501
        :rtype: str
        """
        return self._hispanic_ethnicity

    @hispanic_ethnicity.setter
    def hispanic_ethnicity(self, hispanic_ethnicity):
        """Sets the hispanic_ethnicity of this Student.


        :param hispanic_ethnicity: The hispanic_ethnicity of this Student.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N", ""]  # noqa: E501
        if hispanic_ethnicity not in allowed_values:
            raise ValueError(
                "Invalid value for `hispanic_ethnicity` ({0}), must be one of {1}"  # noqa: E501
                .format(hispanic_ethnicity, allowed_values)
            )

        self._hispanic_ethnicity = hispanic_ethnicity

    @property
    def home_language(self):
        """Gets the home_language of this Student.  # noqa: E501


        :return: The home_language of this Student.  # noqa: E501
        :rtype: str
        """
        return self._home_language

    @home_language.setter
    def home_language(self, home_language):
        """Sets the home_language of this Student.


        :param home_language: The home_language of this Student.  # noqa: E501
        :type: str
        """
        allowed_values = ["Galician", "Sindhi", "Vietnamese", "Cebuano", "Hawaiian", "Ewe", "Turkish", "Amharic", "Polish", "Oromo", "Maltese", "Krio", "Russian", "Shona", "Nepali", "Indonesian", "Tahitian", "Tsonga", "Tongan", "Burmese", "Irish", "Armenian", "Spanish", "Catalan", "Malay", "Malagasy", "Hmong", "Hindi", "Dogri", "Swedish", "Arabic", "Swahili", "Punjabi", "Azerbaijani", "Assamese", "French", "Georgian", "English", "Tamil", "Tatar", "German", "Romanian", "Bashkir", "Quechua", "Albanian", "Croatian", "Manipuri", "Bosnian", "Malayalam", "Gujarati", "Aymara", "Chichewa", "Javanese", "Faroese", "Serbian", "Xhosa", "Fijian", "Greek", "Belarusian", "Sinhala", "Uzbek", "Zulu", "Farsi", "Italian", "Other", "Cabo Verdean", "Haitian Creole", "Hebrew", "Kirundi", "Lower Sorbian", "Divehi", "Sundanese", "Maori", "Upper Sorbian", "Kinyarwanda", "Czech", "Bengali", "Sesotho", "Twi", "Japanese", "Queretaro Otomi", "Kyrgyz", "Welsh", "Mongolian", "Konkani", "Odia", "Guarani", "Kannada", "Lithuanian", "Samoan", "Somali", "Kazakh", "Hungarian", "Laotian", "Maithili", "Yoruba", "Luganda", "Hausa", "Thai", "Slovenian", "Bulgarian", "Dari", "Telugu", "Igbo", "Bambara", "Luxembourgish", "Chuukese", "Mizo", "Inuktitut", "Filipino", "Marshallese", "Ilocano", "Northern Sotho", "Tibetan", "Marathi", "Tajik", "Chinese", "Corsican", "Tagalog", "Dutch", "Urdu", "Portuguese", "Korean", "Estonian", "Danish", "Afrikaans", "Ukrainian", "Scots Gaelic", "Kurdish (Kurmanji)", "Macedonian", "Yucatec Maya", "Inuinnaqtun", "Cantonese", "Norwegian", "Basque", "Karen", "Yiddish", "Khmer", "Mandarin", "Setswana", "Tigrinya", "Icelandic", "Uyghur", "Kurdish (Sorani)", "Lingala", "Latvian", "Pashto", "Frisian", "Bhojpuri", "Finnish", "Slovak", "Turkmen"]  # noqa: E501
        if home_language not in allowed_values:
            raise ValueError(
                "Invalid value for `home_language` ({0}), must be one of {1}"  # noqa: E501
                .format(home_language, allowed_values)
            )

        self._home_language = home_language

    @property
    def home_language_code(self):
        """Gets the home_language_code of this Student.  # noqa: E501


        :return: The home_language_code of this Student.  # noqa: E501
        :rtype: str
        """
        return self._home_language_code

    @home_language_code.setter
    def home_language_code(self, home_language_code):
        """Sets the home_language_code of this Student.


        :param home_language_code: The home_language_code of this Student.  # noqa: E501
        :type: str
        """
        allowed_values = ["bak", "mya", "cpp", "ikt", "ckb", "lin", "tgk", "cym", "yue", "nya", "dan", "mah", "jav", "mar", "tat", "guj", "nob", "sna", "slk", "zho", "ilo", "lug", "nep", "uzb", "fij", "aze", "kat", "hau", "kaz", "twi", "ces", "prs", "fao", "kan", "kur", "lav", "lit", "mni", "nso", "urd", "asm", "ind", "tel", "tuk", "bam", "bos", "hmn", "ita", "mal", "smo", "ben", "ewe", "deu", "hin", "por", "que", "sot", "afr", "eus", "heb", "kor", "mkd", "pol", "srp", "tha", "div", "dgo", "kar", "mai", "tsn", "tir", "cos", "isl", "mon", "ron", "yor", "zul", "other", "fas", "fra", "run", "sun", "tur", "amh", "aym", "nld", "hun", "ibo", "jpn", "bod", "ukr", "eng", "gle", "lao", "tam", "cat", "chk", "glg", "msa", "orm", "mlt", "mri", "lus", "snd", "yid", "hye", "knn", "dsb", "swe", "hsb", "ell", "otq", "tgl", "iku", "kin", "kri", "mlg", "pus", "rus", "gla", "tah", "xho", "ara", "hat", "sqi", "fry", "spa", "grn", "ltz", "yua", "ori", "uig", "tso", "khm", "kir", "vie", "bho", "ceb", "haw", "slv", "som", "swa", "ton", "bel", "est", "fin", "cmn", "sin", "bul", "hrv", "fil", "pan"]  # noqa: E501
        if home_language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `home_language_code` ({0}), must be one of {1}"  # noqa: E501
                .format(home_language_code, allowed_values)
            )

        self._home_language_code = home_language_code

    @property
    def iep_status(self):
        """Gets the iep_status of this Student.  # noqa: E501


        :return: The iep_status of this Student.  # noqa: E501
        :rtype: str
        """
        return self._iep_status

    @iep_status.setter
    def iep_status(self, iep_status):
        """Sets the iep_status of this Student.


        :param iep_status: The iep_status of this Student.  # noqa: E501
        :type: str
        """

        self._iep_status = iep_status

    @property
    def last_modified(self):
        """Gets the last_modified of this Student.  # noqa: E501


        :return: The last_modified of this Student.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Student.


        :param last_modified: The last_modified of this Student.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def legacy_id(self):
        """Gets the legacy_id of this Student.  # noqa: E501


        :return: The legacy_id of this Student.  # noqa: E501
        :rtype: str
        """
        return self._legacy_id

    @legacy_id.setter
    def legacy_id(self, legacy_id):
        """Sets the legacy_id of this Student.


        :param legacy_id: The legacy_id of this Student.  # noqa: E501
        :type: str
        """

        self._legacy_id = legacy_id

    @property
    def location(self):
        """Gets the location of this Student.  # noqa: E501


        :return: The location of this Student.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Student.


        :param location: The location of this Student.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def preferred_name(self):
        """Gets the preferred_name of this Student.  # noqa: E501


        :return: The preferred_name of this Student.  # noqa: E501
        :rtype: PreferredName
        """
        return self._preferred_name

    @preferred_name.setter
    def preferred_name(self, preferred_name):
        """Sets the preferred_name of this Student.


        :param preferred_name: The preferred_name of this Student.  # noqa: E501
        :type: PreferredName
        """

        self._preferred_name = preferred_name

    @property
    def race(self):
        """Gets the race of this Student.  # noqa: E501


        :return: The race of this Student.  # noqa: E501
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race):
        """Sets the race of this Student.


        :param race: The race of this Student.  # noqa: E501
        :type: str
        """
        allowed_values = ["Caucasian", "Asian", "Black or African American", "American Indian", "Hawaiian or Other Pacific Islander", "Two or More Races", "Unknown", ""]  # noqa: E501
        if race not in allowed_values:
            raise ValueError(
                "Invalid value for `race` ({0}), must be one of {1}"  # noqa: E501
                .format(race, allowed_values)
            )

        self._race = race

    @property
    def school(self):
        """Gets the school of this Student.  # noqa: E501


        :return: The school of this Student.  # noqa: E501
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this Student.


        :param school: The school of this Student.  # noqa: E501
        :type: str
        """

        self._school = school

    @property
    def schools(self):
        """Gets the schools of this Student.  # noqa: E501


        :return: The schools of this Student.  # noqa: E501
        :rtype: list[str]
        """
        return self._schools

    @schools.setter
    def schools(self, schools):
        """Sets the schools of this Student.


        :param schools: The schools of this Student.  # noqa: E501
        :type: list[str]
        """

        self._schools = schools

    @property
    def section_504_status(self):
        """Gets the section_504_status of this Student.  # noqa: E501


        :return: The section_504_status of this Student.  # noqa: E501
        :rtype: str
        """
        return self._section_504_status

    @section_504_status.setter
    def section_504_status(self, section_504_status):
        """Sets the section_504_status of this Student.


        :param section_504_status: The section_504_status of this Student.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N", ""]  # noqa: E501
        if section_504_status not in allowed_values:
            raise ValueError(
                "Invalid value for `section_504_status` ({0}), must be one of {1}"  # noqa: E501
                .format(section_504_status, allowed_values)
            )

        self._section_504_status = section_504_status

    @property
    def sis_id(self):
        """Gets the sis_id of this Student.  # noqa: E501


        :return: The sis_id of this Student.  # noqa: E501
        :rtype: str
        """
        return self._sis_id

    @sis_id.setter
    def sis_id(self, sis_id):
        """Sets the sis_id of this Student.


        :param sis_id: The sis_id of this Student.  # noqa: E501
        :type: str
        """

        self._sis_id = sis_id

    @property
    def state_id(self):
        """Gets the state_id of this Student.  # noqa: E501


        :return: The state_id of this Student.  # noqa: E501
        :rtype: str
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id):
        """Sets the state_id of this Student.


        :param state_id: The state_id of this Student.  # noqa: E501
        :type: str
        """

        self._state_id = state_id

    @property
    def student_number(self):
        """Gets the student_number of this Student.  # noqa: E501


        :return: The student_number of this Student.  # noqa: E501
        :rtype: str
        """
        return self._student_number

    @student_number.setter
    def student_number(self, student_number):
        """Sets the student_number of this Student.


        :param student_number: The student_number of this Student.  # noqa: E501
        :type: str
        """

        self._student_number = student_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Student, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Student):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
